{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aa473eb4-04aa-4da5-896f-91ec889a0db7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from keras.models import load_model\n",
    "from keras.preprocessing.sequence import pad_sequences\n",
    "from keras.preprocessing.text import Tokenizer\n",
    "import re\n",
    "\n",
    "# Load the trained RNN model\n",
    "model = load_model('rnn_model.5')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4a3ed569-f81a-4df1-ba75-e8ebac204339",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Preprocessing function for text features\n",
    "def clean_text(text):\n",
    "    text = text.lower()\n",
    "    text = re.sub(r'http\\S+', '', text)\n",
    "    text = re.sub(r'[^a-z\\s]', '', text)\n",
    "    return text\n",
    "\n",
    "\n",
    "\n",
    "# Encode target labels\n",
    "label_encoder = LabelEncoder()\n",
    "df2['Category'] = label_encoder.fit_transform(df2['Category'])\n",
    "\n",
    "# Clean the text features\n",
    "df2['Cleaned_Message'] = df2['Message'].apply(clean_text)\n",
    "df2['Cleaned_user_name'] = df2['user_name'].apply(clean_text)\n",
    "df2['Cleaned_domain'] = df2['domain'].apply(clean_text)\n",
    "\n",
    "# Prepare text data for RNN model\n",
    "tokenizer = Tokenizer()\n",
    "tokenizer.fit_on_texts(df2['Cleaned_Message'])\n",
    "X_sequences = tokenizer.texts_to_sequences(df2['Cleaned_Message'])\n",
    "X_padded = pad_sequences(X_sequences, maxlen=100)  # Adjust maxlen as needed\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Preprocessing function for text features\n",
    "def clean_text(text):\n",
    "    text = text.lower()\n",
    "    text = re.sub(r'http\\S+', '', text)\n",
    "    text = re.sub(r'[^a-z\\s]', '', text)\n",
    "    return text\n",
    "\n",
    "\n",
    "\n",
    "# Encode target labels\n",
    "label_encoder = LabelEncoder()\n",
    "df2['Category'] = label_encoder.fit_transform(df2['Category'])\n",
    "\n",
    "# Clean the text features\n",
    "df2['Cleaned_Message'] = df2['Message'].apply(clean_text)\n",
    "df2['Cleaned_user_name'] = df2['user_name'].apply(clean_text)\n",
    "df2['Cleaned_domain'] = df2['domain'].apply(clean_text)\n",
    "\n",
    "# Prepare text data for RNN model\n",
    "tokenizer = Tokenizer()\n",
    "tokenizer.fit_on_texts(df2['Cleaned_Message'])\n",
    "X_sequences = tokenizer.texts_to_sequences(df2['Cleaned_Message'])\n",
    "X_padded = pad_sequences(X_sequences, maxlen=100)  # Adjust maxlen as needed\n",
    "\n",
    "# Split data\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_padded, df2['Category'], test_size=0.2, random_state=42)\n",
    "\n",
    "# Apply SMOTE to the training data\n",
    "smote = SMOTE()\n",
    "X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)\n",
    "\n",
    "# Convert y to categorical\n",
    "y_train_categorical = to_categorical(y_train_resampled)\n",
    "y_test_categorical = to_categorical(y_test)\n",
    "\n",
    "# Build RNN model\n",
    "def build_rnn_model():\n",
    "    model = Sequential()\n",
    "    model.add(Embedding(input_dim=len(tokenizer.word_index) + 1, output_dim=50, input_length=100))\n",
    "    model.add(SimpleRNN(50, activation='relu'))\n",
    "    model.add(Dense(2, activation='softmax'))\n",
    "    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "    return model\n",
    "\n",
    "# Train the RNN model\n",
    "rnn_model = build_rnn_model()\n",
    "rnn_model.fit(X_train_resampled, y_train_categorical, epochs=10, batch_size=8, validation_split=0.2, verbose=0)\n",
    "rnn_model.save('rnn_model.1')\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
